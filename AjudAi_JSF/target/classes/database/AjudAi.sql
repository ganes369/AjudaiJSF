CREATE TABLE USUARIO(
	NomeUsuario VARCHAR(200),
	NomeCompleto VARCHAR(200),
	DataNascimento DATE,
	Email VARCHAR(100),
	Senha VARCHAR(100),
	imagem VARCHAR(300),
	Telefone VARCHAR(20),
	Ativo BOOLEAN DEFAULT TRUE,
	Acesso BOOLEAN DEFAULT FALSE,
	CONSTRAINT PK_USUARIO PRIMARY KEY(NomeUsuario),
    CONSTRAINT EMAIL_USUARIO UNIQUE(Email)
);

CREATE TABLE ESPECIALISTA(
	NomeUsuario VARCHAR(200),
	Descricao VARCHAR(500),
	CONSTRAINT PK_ESPECIALISTA PRIMARY KEY(NomeUsuario),
	CONSTRAINT FK_ESPECIALISTA FOREIGN KEY(NomeUsuario) REFERENCES USUARIO(NomeUsuario)
		ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE AREAESPECIALISTA(
	NomeUsuarioEspecialista VARCHAR(200),
	Area VARCHAR(50),
	CONSTRAINT PK_AREAESPECIALISTA PRIMARY KEY(NomeUsuarioEspecialista,Area),
	CONSTRAINT FK_AREAESPECIALISTA FOREIGN KEY(NomeUsuarioEspecialista) REFERENCES ESPECIALISTA(NomeUsuario)
		ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE ESTANTE(
	Id SERIAL,
	DataCriacao DATE,
	NomeUsuario VARCHAR(200),
	CONSTRAINT PK_ESTANTE PRIMARY KEY(Id),
	CONSTRAINT FK_ESTANTE FOREIGN KEY(NomeUsuario) REFERENCES USUARIO(NomeUsuario)
		ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE PRATELEIRA(
	Codigo SERIAL,
	Nome VARCHAR(200),
	IdEstante INTEGER,
	Descricao VARCHAR(500),
	DataCriacao DATE,
	Tipo VARCHAR(30),
	CONSTRAINT PK_PRATELEIRA PRIMARY KEY(Codigo,IdEstante),
	CONSTRAINT FK_PRATELEIRA FOREIGN KEY(IdEstante) REFERENCES ESTANTE(Id)
		ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE CONTEUDO(
	Codigo SERIAL,
	Nome VARCHAR(200),
	Local VARCHAR(300),
	CONSTRAINT PK_CONTEUDO PRIMARY KEY(Codigo)
);

CREATE TABLE PRATELEIRACONTEUDO(
	IdEstante INTEGER,
	CodPrateleira INTEGER,
	CodConteudo INTEGER,
	CONSTRAINT PK_PRATELEIRACONTEUDO PRIMARY KEY(IdEstante,CodPrateleira, CodConteudo),
	CONSTRAINT FK1_PRATELEIRACONTEUDO FOREIGN KEY(IdEstante,CodPrateleira) REFERENCES PRATELEIRA(IdEstante,Codigo)
		ON UPDATE CASCADE ON DELETE CASCADE ,
	CONSTRAINT FK2_PRATELEIRACONTEUDO FOREIGN KEY(CodConteudo) REFERENCES CONTEUDO(Codigo)
		ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE AVALIACONTEUDO(
	NomeUsuario VARCHAR(200),
	CodConteudo INTEGER,
	Nota INTEGER,
	CONSTRAINT PK_AVALIACONTEUDO PRIMARY KEY(NomeUsuario,CodConteudo),
	CONSTRAINT FK1_AVALIACONTEUDO FOREIGN KEY(NomeUsuario) REFERENCES USUARIO(NomeUsuario)
		ON UPDATE CASCADE ON DELETE CASCADE ,
	CONSTRAINT FK2_AVALIACONTEUDO FOREIGN KEY(CodConteudo) REFERENCES CONTEUDO(Codigo)
		ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE POSTAGEM(
	Codigo SERIAL,
	Area VARCHAR(50),
	Descricao VARCHAR(500),
	DataPostagem DATE,
	NomeUsuario VARCHAR(200),
	CodConteudo INTEGER,
	CONSTRAINT PK_POSTAGEM PRIMARY KEY(Codigo),
	CONSTRAINT FK1_POSTAGEM FOREIGN KEY(NomeUsuario) REFERENCES USUARIO(NomeUsuario)
		ON UPDATE CASCADE ON DELETE CASCADE ,
	CONSTRAINT FK2_POSTAGEM FOREIGN KEY(CodConteudo) REFERENCES CONTEUDO(Codigo)
		ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE COMENTARIO(
	Id SERIAL,
	CodPostagem INTEGER,
	Descricao VARCHAR(500),
	DataComentario DATE,
	CONSTRAINT PK_COMENTARIO PRIMARY KEY(Id,CodPostagem),
	CONSTRAINT FK_COMENTARIO FOREIGN KEY(CodPostagem) REFERENCES POSTAGEM(Codigo)
		ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE ADMINISTRADOR(
	Codigo SERIAL,
	NomeCompleto VARCHAR(200),
	Email VARCHAR(100),
	Senha VARCHAR(100), 
	DataInicio DATE,
	DataFim DATE,
	CONSTRAINT PK_ADMINISTRADOR PRIMARY KEY(Codigo)
);


CREATE TABLE ALERTA(
	Id SERIAL,
	Conteudo VARCHAR(20),
	IdComentario INTEGER,
	CodPostagem INTEGER,
	CodAdmin INTEGER,
	CONSTRAINT PK_ALERTA PRIMARY KEY(Id),
	CONSTRAINT FK1_ALERTA FOREIGN KEY(IdComentario,CodPostagem) REFERENCES COMENTARIO(Id,CodPostagem)
		ON UPDATE CASCADE ON DELETE CASCADE ,
	CONSTRAINT FK2_ALERTA FOREIGN KEY(CodAdmin) REFERENCES ADMINISTRADOR(Codigo)
		ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION criaEstante() RETURNS TRIGGER 
AS 
	$$
	BEGIN
		INSERT INTO ESTANTE(datacriacao,nomeusuario) VALUES(CURRENT_DATE, New.nomeUsuario);
		RETURN New;
	END
	$$ LANGUAGE PLPGSQL;
	
CREATE TRIGGER criaEstante
AFTER INSERT ON USUARIO
FOR EACH ROW
EXECUTE PROCEDURE criaEstante();


CREATE OR REPLACE FUNCTION recuperaCodigo()
RETURNS INTEGER AS
	$$
	DECLARE
		resultado CONTEUDO%RowType;
		cod INTEGER;
	BEGIN
		FOR resultado IN SELECT * FROM Conteudo
		LOOP
			cod:= resultado.Codigo;
		END LOOP;
		RETURN cod;
	END
	$$ LANGUAGE PLPGSQL;









	







	
